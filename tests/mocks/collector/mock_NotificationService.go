// Code generated by mockery v2.44.2. DO NOT EDIT.

package collector_mock

import (
	entity "github.com/daemondxx/lks_back/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockNotificationService is an autogenerated mock type for the NotificationService type
type MockNotificationService struct {
	mock.Mock
}

type MockNotificationService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNotificationService) EXPECT() *MockNotificationService_Expecter {
	return &MockNotificationService_Expecter{mock: &_m.Mock}
}

// ActualOrderNotify provides a mock function with given fields: userID, o
func (_m *MockNotificationService) ActualOrderNotify(userID uint, o entity.Order) {
	_m.Called(userID, o)
}

// MockNotificationService_ActualOrderNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ActualOrderNotify'
type MockNotificationService_ActualOrderNotify_Call struct {
	*mock.Call
}

// ActualOrderNotify is a helper method to define mock.On call
//   - userID uint
//   - o entity.Order
func (_e *MockNotificationService_Expecter) ActualOrderNotify(userID interface{}, o interface{}) *MockNotificationService_ActualOrderNotify_Call {
	return &MockNotificationService_ActualOrderNotify_Call{Call: _e.mock.On("ActualOrderNotify", userID, o)}
}

func (_c *MockNotificationService_ActualOrderNotify_Call) Run(run func(userID uint, o entity.Order)) *MockNotificationService_ActualOrderNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(entity.Order))
	})
	return _c
}

func (_c *MockNotificationService_ActualOrderNotify_Call) Return() *MockNotificationService_ActualOrderNotify_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotificationService_ActualOrderNotify_Call) RunAndReturn(run func(uint, entity.Order)) *MockNotificationService_ActualOrderNotify_Call {
	_c.Call.Return(run)
	return _c
}

// ErrorNotify provides a mock function with given fields: userID, err
func (_m *MockNotificationService) ErrorNotify(userID uint, err error) {
	_m.Called(userID, err)
}

// MockNotificationService_ErrorNotify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorNotify'
type MockNotificationService_ErrorNotify_Call struct {
	*mock.Call
}

// ErrorNotify is a helper method to define mock.On call
//   - userID uint
//   - err error
func (_e *MockNotificationService_Expecter) ErrorNotify(userID interface{}, err interface{}) *MockNotificationService_ErrorNotify_Call {
	return &MockNotificationService_ErrorNotify_Call{Call: _e.mock.On("ErrorNotify", userID, err)}
}

func (_c *MockNotificationService_ErrorNotify_Call) Run(run func(userID uint, err error)) *MockNotificationService_ErrorNotify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint), args[1].(error))
	})
	return _c
}

func (_c *MockNotificationService_ErrorNotify_Call) Return() *MockNotificationService_ErrorNotify_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockNotificationService_ErrorNotify_Call) RunAndReturn(run func(uint, error)) *MockNotificationService_ErrorNotify_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNotificationService creates a new instance of MockNotificationService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNotificationService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNotificationService {
	mock := &MockNotificationService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
