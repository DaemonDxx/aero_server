// Code generated by mockery v2.44.2. DO NOT EDIT.

package collector_mock

import (
	context "context"

	entity "github.com/daemondxx/lks_back/entity"
	mock "github.com/stretchr/testify/mock"
)

// MockOrderService is an autogenerated mock type for the OrderService type
type MockOrderService struct {
	mock.Mock
}

type MockOrderService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockOrderService) EXPECT() *MockOrderService_Expecter {
	return &MockOrderService_Expecter{mock: &_m.Mock}
}

// GetActualOrder provides a mock function with given fields: ctx, userID
func (_m *MockOrderService) GetActualOrder(ctx context.Context, userID uint) (entity.Order, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetActualOrder")
	}

	var r0 entity.Order
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint) (entity.Order, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint) entity.Order); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(entity.Order)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockOrderService_GetActualOrder_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActualOrder'
type MockOrderService_GetActualOrder_Call struct {
	*mock.Call
}

// GetActualOrder is a helper method to define mock.On call
//   - ctx context.Context
//   - userID uint
func (_e *MockOrderService_Expecter) GetActualOrder(ctx interface{}, userID interface{}) *MockOrderService_GetActualOrder_Call {
	return &MockOrderService_GetActualOrder_Call{Call: _e.mock.On("GetActualOrder", ctx, userID)}
}

func (_c *MockOrderService_GetActualOrder_Call) Run(run func(ctx context.Context, userID uint)) *MockOrderService_GetActualOrder_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint))
	})
	return _c
}

func (_c *MockOrderService_GetActualOrder_Call) Return(_a0 entity.Order, _a1 error) *MockOrderService_GetActualOrder_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockOrderService_GetActualOrder_Call) RunAndReturn(run func(context.Context, uint) (entity.Order, error)) *MockOrderService_GetActualOrder_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockOrderService creates a new instance of MockOrderService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockOrderService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockOrderService {
	mock := &MockOrderService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
